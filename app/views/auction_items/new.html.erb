<% def round_to_nearest_10_min(time)
     seconds = time.sec + time.min % 10 * 60
     adjustment = seconds >= 5 * 60 ? 10 - time.min % 10 : -(time.min % 10)
     time.change(min: (time.min + adjustment) % 60, sec: 0)
   end %>

<%= form_with(model: @auction_item, local: true, html: { multipart: true }, class: "auction-form") do |form| %>
  <div class="auction-container">
    <div class="create-auction-title-container">
      <div class="create-auction-title"><i class="fa-solid fa-gavel"></i> Add Auction Item</div>
    </div>

    <div class="auction-form-container">
      <!-- Left Side: General Information -->
      <div class="auction-left">
        <div class="auction-left-general"> 
          <p>General Information</p>
          <div class="input-group">
            <p>Product Name</p>
            <%= form.text_field :name, required: true, class: "input-field" %>
          </div>
          <div class="input-group-product" style="position: relative;">
            <div class="input-group">
              <p>Item Type</p>
              <%= form.select :item_type, AuctionItem.item_types.keys.map { |k| [k.titleize, k] },
              {}, class: "input-field" %>
            </div>
            <p class="input-group-product">Product Description</p>
            <%= form.text_area :description,
                  required: true,
                  class: "input-field textarea",
                  maxlength: 500,
                  id: "product-description" %>
            <small id="description-count">0/500</small>
          </div>
        </div>
        <div class="auction-left-general">
          <p>Bid Details</p>
          <div class="bid-details-grid">
            <div class="input-group col-span-4">
              <p>Starting Bid</p>
              <%= form.number_field :curr_max_bid, step: 0.01, required: true, class: "input-field" %>
            </div>

            <div class="input-group col-span-4">
              <p>Minimum Increment</p>
              <%= form.number_field :min_increment, step: 0.01, required: true, class: "input-field" %>
            </div>

            <div class="input-group col-span-4">
              <p>Product Estimated Value</p>
              <%= form.number_field :innate_value, step: 0.01, required: true, class: "input-field" %>
            </div>

            <div class="input-group col-span-6">
              <p>Open Date</p>
              <%= form.datetime_local_field :opening_date,
                  required: true,
                  class: "input-field",
                  min: Time.zone.now.strftime("%Y-%m-%dT%H:%M"),
                  value: (form.object.opening_date || round_to_nearest_10_min(Time.zone.now)).strftime("%Y-%m-%dT%H:%M"),
                  id: "opening_date" %>
            </div>

            <div class="input-group col-span-6">
              <p>Close Date</p>
              <%= form.datetime_local_field :closing_date,
                  required: true,
                  class: "input-field",
                  min: Time.zone.now.strftime("%Y-%m-%dT%H:%M"),
                  value: (form.object.closing_date || round_to_nearest_10_min(Time.zone.now + 1.week)).strftime("%Y-%m-%dT%H:%M"),
                  id: "closing_date" %>
            </div>


          </div>
        </div>
      </div>
    
      <!-- Right Side: Image Upload -->
      <div class="auction-right">
        <p class="section-title">Product Images</p>
        <div class="main-image-container">
          <%= image_tag "default_item.png", class: "main-product-image", id: "main-image" %>
        </div>

        <div class="thumbnail-container" id="image-preview-container">
          <!-- The uploaded images will appear here dynamically -->
        </div>

        <label for="image-upload-input" class="upload-btn">
          <i class="fa-solid fa-plus"></i>
        </label>

        <%= form.file_field :images, multiple: true, class: "input-field", id: "image-upload-input", style: "display: none;" %>
      </div>
    </div>
  </div>

  <!-- Submit Button -->
  <div class="form-actions">
    <%= form.submit "Create Auction Item", class: "primary-btn" %>
  </div>

<% end %>


<script>
  document.addEventListener("DOMContentLoaded", function () {
    const mainImage = document.getElementById("main-image");
    const thumbnailContainer = document.getElementById("image-preview-container");
    const imageInput = document.getElementById("image-upload-input");
    let fileList = new DataTransfer();

    function createThumbnail(imageSrc, file = null) {
      let newThumbnail = document.createElement("div");
      newThumbnail.classList.add("thumbnail-wrapper");

      let img = document.createElement("img");
      img.src = imageSrc;
      img.classList.add("thumbnail-image");

      let removeBtn = document.createElement("button");
      removeBtn.innerHTML = '<i class="fa-solid fa-xmark"></i>';
      removeBtn.classList.add("remove-btn");

      removeBtn.addEventListener("click", function (event) {
        event.stopPropagation();
        newThumbnail.remove();

        if (file) {
          let fileIndex = [...fileList.files].findIndex(f => f.name === file.name && f.lastModified === file.lastModified);
          if (fileIndex !== -1) {
            fileList.items.remove(fileIndex);
            imageInput.files = fileList.files;
          }
        }
      });

      newThumbnail.addEventListener("click", function () {
        mainImage.src = imageSrc;
        document.querySelectorAll(".thumbnail-wrapper").forEach(t => t.classList.remove("selected"));
        newThumbnail.classList.add("selected");
      });

      newThumbnail.appendChild(img);
      newThumbnail.appendChild(removeBtn);
      thumbnailContainer.appendChild(newThumbnail);
    }

    imageInput.addEventListener("change", function (event) {
      let files = Array.from(event.target.files);
      if (files.length === 0) return;

      files.forEach((file) => {
        let reader = new FileReader();
        reader.onload = function (e) {
          createThumbnail(e.target.result, file);

          if (!mainImage.src || mainImage.src.includes("default_item.png")) {
            mainImage.src = e.target.result;
          }
        };
        reader.readAsDataURL(file);

        fileList.items.add(file);
      });

      imageInput.files = fileList.files;
    });
  });

  document.addEventListener("DOMContentLoaded", function () {
    const openingDateInput = document.getElementById("opening_date");
    const closingDateInput = document.getElementById("closing_date");

    function roundToNearest10Minutes(date) {
      const rounded = new Date(date);
      const minutes = rounded.getMinutes();
      const remainder = minutes % 10;
      if (remainder >= 5) {
        rounded.setMinutes(minutes + (10 - remainder));
      } else {
        rounded.setMinutes(minutes - remainder);
      }
      rounded.setSeconds(0);
      rounded.setMilliseconds(0);
      return rounded;
    }

    function formatDateTimeLocal(date) {
      const pad = (n) => n.toString().padStart(2, "0");
      return (
        date.getFullYear() +
        "-" +
        pad(date.getMonth() + 1) +
        "-" +
        pad(date.getDate()) +
        "T" +
        pad(date.getHours()) +
        ":" +
        pad(date.getMinutes())
      );
    }

    function setInitialValues() {
      const now = new Date();
      const roundedOpen = roundToNearest10Minutes(now);
      const roundedClose = roundToNearest10Minutes(new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000)); // +1 week

      if (!openingDateInput.value) {
        openingDateInput.value = formatDateTimeLocal(roundedOpen);
      }

      if (!closingDateInput.value) {
        closingDateInput.value = formatDateTimeLocal(roundedClose);
      }

      updateClosingDateBounds();
    }

    function updateClosingDateBounds() {
      const openDate = new Date(openingDateInput.value);
      if (!isNaN(openDate)) {
        const minDate = formatDateTimeLocal(openDate);
        closingDateInput.min = minDate;

        const maxDate = new Date(openDate.getTime() + 30 * 24 * 60 * 60 * 1000);
        closingDateInput.max = formatDateTimeLocal(maxDate);

        const currentClose = new Date(closingDateInput.value);
        if (currentClose < openDate || currentClose > maxDate) {
          closingDateInput.value = minDate;
        }
      }
    }

    openingDateInput.addEventListener("blur", function () {
      openingDateInput.value = formatDateTimeLocal(roundToNearest10Minutes(new Date(openingDateInput.value)));
      updateClosingDateBounds();
    });

    closingDateInput.addEventListener("blur", function () {
      closingDateInput.value = formatDateTimeLocal(roundToNearest10Minutes(new Date(closingDateInput.value)));
    });

    setInitialValues();
  });



  const descriptionInput = document.getElementById("product-description");
  const descriptionCount = document.getElementById("description-count");

  if (descriptionInput && descriptionCount) {
    descriptionInput.addEventListener("input", function () {
      const len = descriptionInput.value.length;
      descriptionCount.textContent = `${len}/500`;
    });
  }
</script>