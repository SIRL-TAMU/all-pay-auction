<%= form_with(model: @auction_item, local: true, html: { multipart: true }, class: "auction-form") do |form| %>
  <div class="auction-container">
    <div class="create-auction-title-container">
      <div class="create-auction-title"><i class="fa-solid fa-gavel"></i> Edit Auction Item</div>
    </div>

    <div class="auction-form-container">
      <!-- Left Side: General Information -->
      <div class="auction-left">
        <div class="auction-left-general"> 
          <p>General Information</p>
          <div class="input-group">
            <p>Product Name</p>
            <%= form.text_field :name, required: true, class: "input-field" %>
          </div>

          <div class="input-group" style="position: relative;">
            <p class="input-group-product">Product Description</p>
            <%= form.text_area :description,
                  required: true,
                  class: "input-field textarea",
                  maxlength: 500,
                  id: "product-description" %>
            <small id="description-count">0/500</small>
          </div>
        </div>

        <div class="auction-left-general">
          <p>Bid Details</p>
          <div class="bid-details-grid">
            <div class="input-group">
              <p>Starting Bid</p>
              <%= form.number_field :curr_max_bid, step: 0.01, required: true, class: "input-field" %>
            </div>

            <div class="input-group">
              <p>Minimum Increment</p>
              <%= form.number_field :min_increment, step: 0.01, required: true, class: "input-field" %>
            </div>

            <div class="input-group">
              <p>Product Estimated Value</p>
              <%= form.number_field :innate_value, step: 0.01, required: true, class: "input-field" %>
            </div>
            
            <div> </div>

            <%# THIS IS REAL VERSION, UNCOMMENTED VERSION BELOW IS FOR TESTING %>
            <!-- 
            <div class="input-group">
              <p>Open Date</p>
              <%= form.datetime_local_field :opening_date, required: true, class: "input-field",
                  min: Time.zone.now.strftime("%Y-%m-%dT%H:%M"),
                  value: (form.object.opening_date || Time.zone.now).strftime("%Y-%m-%dT%H:%M"),
                  id: "opening_date" %>
            </div>

            <div class="input-group">
              <p>Close Date</p>
              <%= form.datetime_local_field :closing_date, required: true, class: "input-field",
                  min: Time.zone.now.strftime("%Y-%m-%dT%H:%M"),
                  value: (form.object.closing_date || (Time.zone.now + 1.week)).strftime("%Y-%m-%dT%H:%M"),
                  id: "closing_date" %>
            </div>
            -->

            <div class="input-group">
              <p>Open Date (Testing Version)</p>
              <%= form.datetime_local_field :opening_date, class: "input-field",
                  value: (form.object.opening_date || Time.zone.now).strftime("%Y-%m-%dT%H:%M"),
                  id: "opening_date" %>
            </div>

            <div class="input-group">
              <p>Close Date (Testing Version)</p>
              <%= form.datetime_local_field :closing_date, class: "input-field",
                  value: (form.object.closing_date || (Time.zone.now + 1.week)).strftime("%Y-%m-%dT%H:%M"),
                  id: "closing_date" %>
            </div>


          </div>
        </div>
      </div>

      <!-- Right Side: Image Upload -->
      <div class="auction-right">
        <p class="section-title">Product Images</p>

        <!-- Main Image Display -->
        <div class="main-image-container">
          <% if @auction_item.images.attached? %>
            <%= image_tag @auction_item.images.first, class: "main-product-image", id: "main-image" %>
          <% else %>
            <%= image_tag "default_item.png", class: "main-product-image", id: "main-image" %>
          <% end %>
        </div>

        <!-- Thumbnails -->
        <div class="thumbnail-container">
          <% @auction_item.images.each do |image| %>
            <div class="thumbnail-wrapper" data-image-url="<%= url_for(image) %>">
              <%= image_tag image, class: "thumbnail-image" %>

              <%= link_to remove_image_auction_item_path(@auction_item, image.blob.id),
                  method: :delete,
                  class: "remove-btn",
                  title: "Remove Image" do %>
                <i class="fa-solid fa-xmark"></i>
              <% end %>
            </div>
          <% end %>

          <label for="image-upload-input" class="upload-btn">
            <i class="fa-solid fa-plus"></i>
          </label>
        </div>

        <%= form.file_field :images, multiple: true, class: "input-field", id: "image-upload-input", style: "display: none;" %>
      </div>


    </div>
  </div>

  <div class="form-actions">
    <%= form.submit "Update Auction Item", class: "primary-btn" %>
  </div>

<% end %>


<script>

document.addEventListener("DOMContentLoaded", function () {
  const mainImage = document.getElementById("main-image");
  const thumbnailContainer = document.querySelector(".thumbnail-container");
  const imageInput = document.getElementById("image-upload-input");
  let fileList = new DataTransfer();

  function createThumbnail(imageSrc, file = null) {
    let newThumbnail = document.createElement("div");
    newThumbnail.classList.add("thumbnail-wrapper");

    let img = document.createElement("img");
    img.src = imageSrc;
    img.classList.add("thumbnail-image");

    let removeBtn = document.createElement("button");
    removeBtn.textContent = "Remove";
    removeBtn.classList.add("remove-btn");

    removeBtn.addEventListener("click", function (event) {
      event.stopPropagation();
      newThumbnail.remove();

      if (file) {
        let fileIndex = [...fileList.files].findIndex(f => f.name === file.name && f.lastModified === file.lastModified);
        if (fileIndex !== -1) {
          fileList.items.remove(fileIndex);
          imageInput.files = fileList.files;
        }
      }
    });

    newThumbnail.addEventListener("click", function () {
      mainImage.src = imageSrc;
      document.querySelectorAll(".thumbnail-wrapper").forEach(t => t.classList.remove("selected"));
      newThumbnail.classList.add("selected");
    });

    newThumbnail.appendChild(img);
    newThumbnail.appendChild(removeBtn);
    thumbnailContainer.insertBefore(newThumbnail, thumbnailContainer.lastElementChild);
  }

  imageInput.addEventListener("change", function (event) {
    let files = Array.from(event.target.files);
    if (files.length === 0) return;

    files.forEach((file) => {
      let reader = new FileReader();
      reader.onload = function (e) {
        createThumbnail(e.target.result, file);

        if (!mainImage.src || mainImage.src.includes("default_item.png")) {
          mainImage.src = e.target.result;
        }
      };
      reader.readAsDataURL(file);

      fileList.items.add(file);
    });

    imageInput.files = fileList.files;
  });
});


  document.addEventListener("DOMContentLoaded", function () {
    const openingDateInput = document.getElementById("opening_date");
    const closingDateInput = document.getElementById("closing_date");

    function updateClosingDateBounds() {
      const openDate = new Date(openingDateInput.value);
      if (!isNaN(openDate)) {
        const minDate = openDate.toISOString().slice(0, 16);
        closingDateInput.min = minDate;

        const maxDate = new Date(openDate.getTime() + 30 * 24 * 60 * 60 * 1000);
        closingDateInput.max = maxDate.toISOString().slice(0, 16);

        const currentClose = new Date(closingDateInput.value);
        if (currentClose < openDate || currentClose > maxDate) {
          closingDateInput.value = minDate;
        }
      }
    }

    openingDateInput.addEventListener("change", updateClosingDateBounds);

    updateClosingDateBounds();
  });


    const descriptionInput = document.getElementById("product-description");
    const descriptionCount = document.getElementById("description-count");

    if (descriptionInput && descriptionCount) {
      descriptionInput.addEventListener("input", function () {
        const len = descriptionInput.value.length;
        descriptionCount.textContent = `${len}/500`;
      });
    }
</script>