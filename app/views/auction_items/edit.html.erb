<%= link_to auction_item_path(@auction_item), class: "back-link" do %>
  <i class="fa-solid fa-chevron-left"></i> Back
<% end %>

<%= form_with(model: @auction_item, local: true, html: { multipart: true }, class: "auction-form") do |form| %>
  <div class="auction-container">
    <div class="create-auction-title-container">
      <div class="create-auction-title"><i class="fa-solid fa-gavel"></i> Edit Auction Item</div>
    </div>

    <div class="auction-form-container">
      <!-- Left Side: General Information -->
      <div class="auction-left">
        <div class="auction-left-general"> 
          <p>General Information</p>
          <div class="input-group">
            <p>Product Name</p>
            <%= form.text_field :name, required: true, class: "input-field" %>
          </div>

          <div class="input-group">
            <p class="input-group-product">Product Description</p>
            <%= form.text_area :description, required: true, class: "input-field textarea" %>
          </div>
        </div>

        <div class="auction-left-general">
          <p>Bid Details</p>
          <div class="bid-details-grid">
            <div class="input-group">
              <p>Starting Bid</p>
              <%= form.number_field :curr_max_bid, step: 0.01, required: true, class: "input-field" %>
            </div>

            <div class="input-group">
              <p>Minimum Increment</p>
              <%= form.number_field :min_increment, step: 0.01, required: true, class: "input-field" %>
            </div>

            <div class="input-group">
              <p>Product Estimated Value</p>
              <%= form.number_field :innate_value, step: 0.01, required: true, class: "input-field" %>
            </div>
            
            <div> </div>

            <div class="input-group">
              <p>Open Date</p>
              <%= form.datetime_local_field :opening_date, required: true, class: "input-field" %>
            </div>

            <div class="input-group">
              <p>Close Date</p>
              <%= form.datetime_local_field :closing_date, required: true, class: "input-field" %>
            </div>
          </div>
        </div>
      </div>

      <!-- Right Side: Image Upload -->
      <div class="auction-right">
        <p>Product Images</p>

        <div class="image-container" id="image-preview-container">
          <% if @auction_item.images.attached? %>
            <% @auction_item.images.each do |image| %>
              <div class="image-wrapper">
                <%= image_tag image, class: "product-image" %>
                <%= link_to "Remove", remove_image_auction_item_path(@auction_item, image.blob.id),
                            method: :delete,
                            data: { confirm: "Are you sure you want to delete this image?" },
                            class: "remove-btn" %>
              </div>
            <% end %>
          <% else %>
            <p>No images uploaded</p>
          <% end %>
        </div>

        <!-- Multiple Image Upload Field -->
        <%= form.file_field :images, multiple: true, class: "input-field", id: "image-upload-input" %>
      </div>

    </div>
  </div>

  <div class="form-actions">
    <%= form.submit "Update Auction Item", class: "primary-btn" %>
  </div>

<% end %>


<script>
  document.addEventListener("DOMContentLoaded", function () {
      let imageInput = document.getElementById("image-upload-input");
      let imagePreviewContainer = document.getElementById("image-preview-container");
      let fileList = new DataTransfer();

      if (!imageInput || !imagePreviewContainer) return;

      imageInput.addEventListener("change", function (event) {
          let files = Array.from(event.target.files);

          if (files.length === 0) return;

          files.forEach((file) => {
              let reader = new FileReader();
              reader.onload = function (e) {
                  let imageWrapper = document.createElement("div");
                  imageWrapper.classList.add("image-wrapper");

                  let img = document.createElement("img");
                  img.src = e.target.result;
                  img.classList.add("product-image");

                  let removeBtn = document.createElement("button");
                  removeBtn.textContent = "Remove";
                  removeBtn.classList.add("remove-btn");
                  removeBtn.addEventListener("click", function () {
                      imageWrapper.remove();

                      fileList.items.remove([...fileList.files].findIndex(f => f.name === file.name));
                      imageInput.files = fileList.files;
                  });

                  imageWrapper.appendChild(img);
                  imageWrapper.appendChild(removeBtn);
                  imagePreviewContainer.appendChild(imageWrapper);
              };
              reader.readAsDataURL(file);

              fileList.items.add(file);
          });

          imageInput.files = fileList.files;
      });
  });
</script>