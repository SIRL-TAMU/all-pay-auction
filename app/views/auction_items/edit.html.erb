<% def round_to_nearest_10_min(time)
     seconds = time.sec + time.min % 10 * 60
     adjustment = seconds >= 5 * 60 ? 10 - time.min % 10 : -(time.min % 10)
     time.change(min: (time.min + adjustment) % 60, sec: 0)
   end %>


<%= form_with(model: @auction_item, local: true, html: { multipart: true }, class: "auction-form") do |form| %>
  <div class="auction-container">
    <div class="create-auction-title-container">
      <div class="create-auction-title"><i class="fa-solid fa-gavel"></i> Edit Auction Item</div>
    </div>

    <div class="auction-form-container">
      <!-- Left Side: General Information -->
      <div class="auction-left">
        <div class="auction-left-general"> 
          <p>General Information</p>
          <div class="input-group">
            <p>Product Name</p>
            <%= form.text_field :name, required: true, class: "input-field" %>
          </div>

          <div class="input-group" style="position: relative;">
            <div class="text-sm">Product Description</div>
            <%= form.text_area :description,
                  required: true,
                  class: "input-field textarea",
                  maxlength: 500,
                  id: "product-description" %>
            <small id="description-count">0/500</small>
          </div>

          <div class="input-group mt-5">
              <p>Item Type</p>
              <%= form.select :item_type, AuctionItem.item_types.keys.map { |k| [k.titleize, k] },
              {}, class: "input-field" %>
          </div>
        </div>

        <div class="auction-left-general">
          <p>Bid Details</p>
          <div class="bid-details-grid">
            <div class="input-group col-span-4">
              <p>Starting Bid</p>
              <%= form.number_field :curr_max_bid, step: 0.01, required: true, class: "input-field" %>
            </div>

            <div class="input-group col-span-4">
              <p>Minimum Increment</p>
              <%= form.number_field :min_increment, step: 0.01, required: true, class: "input-field" %>
            </div>

            <div class="input-group col-span-4">
              <p>Product Estimated Value</p>
              <%= form.number_field :innate_value, step: 0.01, required: true, class: "input-field" %>
            </div>
            
            <div class="input-group col-span-6">
              <p>Open Date</p>
              <%= form.datetime_local_field :opening_date,
                  required: true,
                  class: "input-field",
                  id: "opening_date",
                  data: { utc: @auction_item.opening_date&.iso8601 } %>
            </div>

            <div class="input-group col-span-6">
              <p>Close Date</p>
              <%= form.datetime_local_field :closing_date,
                  required: true,
                  class: "input-field",
                  id: "closing_date",
                  data: { utc: @auction_item.closing_date&.iso8601 } %>
            </div>


          </div>

                  <div class="auction-left-general">
          <p>Bidder Information Confidentiality</p>
          <div class="bid-visibility-grid">
            <div class="input-group">
              <div class="visible-toggle-wrapper">
                <span>Allow bidders to see the names of other bidders</span>
                <label class="switch">
                  <%= form.check_box :names_visible, {}, true, false %>
                  <span class="slider round"></span>
                </label>
              </div>
            </div>
            <div class="input-group">
              <div class="visible-toggle-wrapper">
                <span>Allow bidders to see the amount of other bids</span>
                <label class="switch">
                  <%= form.check_box :bid_amount_visible, {}, true, false %>
                  <span class="slider round"></span>
                </label>
              </div>
            </div>
          </div>
        </div>
        </div>
      </div>

      <!-- Right Side: Image Upload -->
      <div class="auction-right">
        <p class="section-title">Product Images</p>

        <!-- Main Image Display -->
        <div class="main-image-container">
          <% if @auction_item.images.attached? %>
            <%= image_tag @auction_item.images.first, class: "main-product-image", id: "main-image" %>
          <% else %>
            <%= image_tag "default_item.png", class: "main-product-image", id: "main-image" %>
          <% end %>
        </div>

        <!-- Thumbnails -->
        <div class="thumbnail-container">
          <% @auction_item.images.each do |image| %>
            <div class="thumbnail-wrapper" data-image-url="<%= url_for(image) %>">
              <%= image_tag image, class: "thumbnail-image" %>

              <%= link_to remove_image_auction_item_path(@auction_item, image.blob.id),
                  method: :delete,
                  class: "remove-btn",
                  title: "Remove Image" do %>
                <i class="fa-solid fa-xmark"></i>
              <% end %>
            </div>
          <% end %>

          <label for="image-upload-input" class="upload-btn">
            <i class="fa-solid fa-plus"></i>
          </label>
        </div>

        <%= form.file_field :images, multiple: true, class: "input-field", id: "image-upload-input", style: "display: none;" %>
      </div>


    </div>
  </div>

  <div class="form-actions">
    <%= form.submit "Update Auction Item", class: "primary-btn" %>
  </div>

<% end %>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const mainImage = document.getElementById("main-image");
    const thumbnailContainer = document.querySelector(".thumbnail-container");
    const imageInput = document.getElementById("image-upload-input");
    let fileList = new DataTransfer();

    function createThumbnail(imageSrc, file = null) {
      const newThumbnail = document.createElement("div");
      newThumbnail.classList.add("thumbnail-wrapper");

      const img = document.createElement("img");
      img.src = imageSrc;
      img.classList.add("thumbnail-image");

      const removeBtn = document.createElement("button");
      removeBtn.textContent = "Remove";
      removeBtn.classList.add("remove-btn");

      removeBtn.addEventListener("click", function (event) {
        event.stopPropagation();
        newThumbnail.remove();
        if (file) {
          const fileIndex = [...fileList.files].findIndex(f => f.name === file.name && f.lastModified === file.lastModified);
          if (fileIndex !== -1) {
            fileList.items.remove(fileIndex);
            imageInput.files = fileList.files;
          }
        }
      });

      newThumbnail.addEventListener("click", function () {
        mainImage.src = imageSrc;
        document.querySelectorAll(".thumbnail-wrapper").forEach(t => t.classList.remove("selected"));
        newThumbnail.classList.add("selected");
      });

      newThumbnail.appendChild(img);
      newThumbnail.appendChild(removeBtn);
      thumbnailContainer.insertBefore(newThumbnail, thumbnailContainer.lastElementChild);
    }

    imageInput.addEventListener("change", function () {
      const files = Array.from(imageInput.files);
      files.forEach((file) => {
        const reader = new FileReader();
        reader.onload = function (e) {
          createThumbnail(e.target.result, file);
          if (!mainImage.src || mainImage.src.includes("default_item.png")) {
            mainImage.src = e.target.result;
          }
        };
        reader.readAsDataURL(file);
        fileList.items.add(file);
      });
      imageInput.files = fileList.files;
    });
  });

  document.addEventListener("DOMContentLoaded", function () {
    const openingDateInput = document.getElementById("opening_date");
    const closingDateInput = document.getElementById("closing_date");

    function roundToNearest10Minutes(date) {
      const rounded = new Date(date);
      const minutes = rounded.getMinutes();
      const remainder = minutes % 10;
      rounded.setMinutes(remainder >= 5 ? minutes + (10 - remainder) : minutes - remainder);
      rounded.setSeconds(0);
      rounded.setMilliseconds(0);
      return rounded;
    }

    function formatDateTimeLocal(date) {
      const pad = (n) => n.toString().padStart(2, "0");
      return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}T${pad(date.getHours())}:${pad(date.getMinutes())}`;
    }

    function initializeInput(inputElement, fallbackDate) {
      const utc = inputElement.dataset.utc;
      if (utc) {
        const local = new Date(utc);
        inputElement.value = formatDateTimeLocal(roundToNearest10Minutes(local));
      } else if (!inputElement.value) {
        inputElement.value = formatDateTimeLocal(roundToNearest10Minutes(fallbackDate));
      }
    }

    function updateClosingBounds() {
      const openDate = new Date(openingDateInput.value);
      if (!isNaN(openDate)) {
        const minClose = openDate;
        const maxClose = new Date(openDate.getTime() + 30 * 24 * 60 * 60 * 1000);
        const currentClose = new Date(closingDateInput.value);

        closingDateInput.min = formatDateTimeLocal(minClose);
        closingDateInput.max = formatDateTimeLocal(maxClose);

        if (currentClose < minClose || currentClose > maxClose) {
          closingDateInput.value = formatDateTimeLocal(minClose);
        }
      }
    }

    const now = new Date();
    const defaultClose = roundToNearest10Minutes(new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000)); // +1 week

    initializeInput(openingDateInput, now);
    initializeInput(closingDateInput, defaultClose);
    updateClosingBounds();

    openingDateInput.addEventListener("blur", function () {
      openingDateInput.value = formatDateTimeLocal(roundToNearest10Minutes(new Date(openingDateInput.value)));
      updateClosingBounds();
    });

    closingDateInput.addEventListener("blur", function () {
      closingDateInput.value = formatDateTimeLocal(roundToNearest10Minutes(new Date(closingDateInput.value)));
    });

    document.querySelector("form")?.addEventListener("submit", function () {
      function convertToUTC(input) {
        const local = new Date(input.value);
        input.value = local.toISOString().slice(0, 16);
      }
      convertToUTC(openingDateInput);
      convertToUTC(closingDateInput);
    });
  });


  const descriptionInput = document.getElementById("product-description");
  const descriptionCount = document.getElementById("description-count");

  if (descriptionInput && descriptionCount) {
    descriptionInput.addEventListener("input", function () {
      const len = descriptionInput.value.length;
      descriptionCount.textContent = `${len}/500`;
    });
  }
</script>